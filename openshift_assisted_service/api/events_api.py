# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist, validator

from typing import List, Optional

from openshift_assisted_service.models.event import Event

from openshift_assisted_service.api_client import ApiClient
from openshift_assisted_service.api_response import ApiResponse
from openshift_assisted_service.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class EventsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def v2_list_events(self, cluster_id : Annotated[Optional[StrictStr], Field(description="The cluster to return events for.")] = None, host_id : Annotated[Optional[StrictStr], Field(description="A host in the specified cluster to return events for (DEPRECATED. Use `host_ids` instead).")] = None, host_ids : Annotated[Optional[conlist(StrictStr)], Field(description="Hosts in the specified cluster to return events for.")] = None, infra_env_id : Annotated[Optional[StrictStr], Field(description="The infra-env to return events for.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The maximum number of records to retrieve.")] = None, offset : Annotated[Optional[StrictInt], Field(description="Number of records to skip before starting to return the records.")] = None, order : Annotated[Optional[StrictStr], Field(description="Order by event_time of events retrieved.")] = None, severities : Annotated[Optional[conlist(StrictStr)], Field(description="Retrieved events severities.")] = None, message : Annotated[Optional[StrictStr], Field(description="Retrieved events message pattern.")] = None, deleted_hosts : Annotated[Optional[StrictBool], Field(description="Deleted hosts flag.")] = None, cluster_level : Annotated[Optional[StrictBool], Field(description="Cluster level events flag.")] = None, categories : Annotated[Optional[conlist(StrictStr)], Field(description="A comma-separated list of event categories.")] = None, **kwargs) -> List[Event]:  # noqa: E501
        """v2_list_events  # noqa: E501

        Lists events for a cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_list_events(cluster_id, host_id, host_ids, infra_env_id, limit, offset, order, severities, message, deleted_hosts, cluster_level, categories, async_req=True)
        >>> result = thread.get()

        :param cluster_id: The cluster to return events for.
        :type cluster_id: str
        :param host_id: A host in the specified cluster to return events for (DEPRECATED. Use `host_ids` instead).
        :type host_id: str
        :param host_ids: Hosts in the specified cluster to return events for.
        :type host_ids: List[str]
        :param infra_env_id: The infra-env to return events for.
        :type infra_env_id: str
        :param limit: The maximum number of records to retrieve.
        :type limit: int
        :param offset: Number of records to skip before starting to return the records.
        :type offset: int
        :param order: Order by event_time of events retrieved.
        :type order: str
        :param severities: Retrieved events severities.
        :type severities: List[str]
        :param message: Retrieved events message pattern.
        :type message: str
        :param deleted_hosts: Deleted hosts flag.
        :type deleted_hosts: bool
        :param cluster_level: Cluster level events flag.
        :type cluster_level: bool
        :param categories: A comma-separated list of event categories.
        :type categories: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Event]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the v2_list_events_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.v2_list_events_with_http_info(cluster_id, host_id, host_ids, infra_env_id, limit, offset, order, severities, message, deleted_hosts, cluster_level, categories, **kwargs)  # noqa: E501

    @validate_arguments
    def v2_list_events_with_http_info(self, cluster_id : Annotated[Optional[StrictStr], Field(description="The cluster to return events for.")] = None, host_id : Annotated[Optional[StrictStr], Field(description="A host in the specified cluster to return events for (DEPRECATED. Use `host_ids` instead).")] = None, host_ids : Annotated[Optional[conlist(StrictStr)], Field(description="Hosts in the specified cluster to return events for.")] = None, infra_env_id : Annotated[Optional[StrictStr], Field(description="The infra-env to return events for.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The maximum number of records to retrieve.")] = None, offset : Annotated[Optional[StrictInt], Field(description="Number of records to skip before starting to return the records.")] = None, order : Annotated[Optional[StrictStr], Field(description="Order by event_time of events retrieved.")] = None, severities : Annotated[Optional[conlist(StrictStr)], Field(description="Retrieved events severities.")] = None, message : Annotated[Optional[StrictStr], Field(description="Retrieved events message pattern.")] = None, deleted_hosts : Annotated[Optional[StrictBool], Field(description="Deleted hosts flag.")] = None, cluster_level : Annotated[Optional[StrictBool], Field(description="Cluster level events flag.")] = None, categories : Annotated[Optional[conlist(StrictStr)], Field(description="A comma-separated list of event categories.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v2_list_events  # noqa: E501

        Lists events for a cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_list_events_with_http_info(cluster_id, host_id, host_ids, infra_env_id, limit, offset, order, severities, message, deleted_hosts, cluster_level, categories, async_req=True)
        >>> result = thread.get()

        :param cluster_id: The cluster to return events for.
        :type cluster_id: str
        :param host_id: A host in the specified cluster to return events for (DEPRECATED. Use `host_ids` instead).
        :type host_id: str
        :param host_ids: Hosts in the specified cluster to return events for.
        :type host_ids: List[str]
        :param infra_env_id: The infra-env to return events for.
        :type infra_env_id: str
        :param limit: The maximum number of records to retrieve.
        :type limit: int
        :param offset: Number of records to skip before starting to return the records.
        :type offset: int
        :param order: Order by event_time of events retrieved.
        :type order: str
        :param severities: Retrieved events severities.
        :type severities: List[str]
        :param message: Retrieved events message pattern.
        :type message: str
        :param deleted_hosts: Deleted hosts flag.
        :type deleted_hosts: bool
        :param cluster_level: Cluster level events flag.
        :type cluster_level: bool
        :param categories: A comma-separated list of event categories.
        :type categories: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Event], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'cluster_id',
            'host_id',
            'host_ids',
            'infra_env_id',
            'limit',
            'offset',
            'order',
            'severities',
            'message',
            'deleted_hosts',
            'cluster_level',
            'categories'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_list_events" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('cluster_id') is not None:  # noqa: E501
            _query_params.append(('cluster_id', _params['cluster_id']))

        if _params.get('host_id') is not None:  # noqa: E501
            _query_params.append(('host_id', _params['host_id']))

        if _params.get('host_ids') is not None:  # noqa: E501
            _query_params.append(('host_ids', _params['host_ids']))
            _collection_formats['host_ids'] = 'csv'

        if _params.get('infra_env_id') is not None:  # noqa: E501
            _query_params.append(('infra_env_id', _params['infra_env_id']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('severities') is not None:  # noqa: E501
            _query_params.append(('severities', _params['severities']))
            _collection_formats['severities'] = 'csv'

        if _params.get('message') is not None:  # noqa: E501
            _query_params.append(('message', _params['message']))

        if _params.get('deleted_hosts') is not None:  # noqa: E501
            _query_params.append(('deleted_hosts', _params['deleted_hosts']))

        if _params.get('cluster_level') is not None:  # noqa: E501
            _query_params.append(('cluster_level', _params['cluster_level']))

        if _params.get('categories') is not None:  # noqa: E501
            _query_params.append(('categories', _params['categories']))
            _collection_formats['categories'] = 'csv'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['urlAuth', 'userAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[Event]",
            '401': "InfraError",
            '403': "InfraError",
            '404': "Error",
            '405': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/v2/events', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
