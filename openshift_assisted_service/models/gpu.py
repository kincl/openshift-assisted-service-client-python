# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Gpu(BaseModel):
    """
    Gpu
    """
    vendor: Optional[StrictStr] = Field(None, description="The name of the device vendor (for example \"Intel Corporation\")")
    vendor_id: Optional[StrictStr] = Field(None, description="ID of the vendor (for example \"8086\")")
    device_id: Optional[StrictStr] = Field(None, description="ID of the device (for example \"3ea0\")")
    name: Optional[StrictStr] = Field(None, description="Product name of the device (for example \"UHD Graphics 620 (Whiskey Lake)\")")
    address: Optional[StrictStr] = Field(None, description="Device address (for example \"0000:00:02.0\")")
    __properties = ["vendor", "vendor_id", "device_id", "name", "address"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Gpu:
        """Create an instance of Gpu from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Gpu:
        """Create an instance of Gpu from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Gpu.parse_obj(obj)

        _obj = Gpu.parse_obj({
            "vendor": obj.get("vendor"),
            "vendor_id": obj.get("vendor_id"),
            "device_id": obj.get("device_id"),
            "name": obj.get("name"),
            "address": obj.get("address")
        })
        return _obj


