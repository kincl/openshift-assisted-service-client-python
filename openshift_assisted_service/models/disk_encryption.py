# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class DiskEncryption(BaseModel):
    """
    DiskEncryption
    """
    enable_on: Optional[StrictStr] = Field('none', description="Enable/disable disk encryption on master nodes, worker nodes, or all nodes.")
    mode: Optional[StrictStr] = Field('tpmv2', description="The disk encryption mode to use.")
    tang_servers: Optional[StrictStr] = Field(None, description="JSON-formatted string containing additional information regarding tang's configuration")
    __properties = ["enable_on", "mode", "tang_servers"]

    @validator('enable_on')
    def enable_on_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('none', 'all', 'masters', 'workers'):
            raise ValueError("must be one of enum values ('none', 'all', 'masters', 'workers')")
        return value

    @validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('tpmv2', 'tang'):
            raise ValueError("must be one of enum values ('tpmv2', 'tang')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiskEncryption:
        """Create an instance of DiskEncryption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiskEncryption:
        """Create an instance of DiskEncryption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DiskEncryption.parse_obj(obj)

        _obj = DiskEncryption.parse_obj({
            "enable_on": obj.get("enable_on") if obj.get("enable_on") is not None else 'none',
            "mode": obj.get("mode") if obj.get("mode") is not None else 'tpmv2',
            "tang_servers": obj.get("tang_servers")
        })
        return _obj


