# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openshift_assisted_service.models.host_static_network_config import HostStaticNetworkConfig
from openshift_assisted_service.models.image_type import ImageType

class ImageCreateParams(BaseModel):
    """
    ImageCreateParams
    """
    ssh_public_key: Optional[StrictStr] = Field(None, description="SSH public key for debugging the installation.")
    static_network_config: Optional[conlist(HostStaticNetworkConfig)] = None
    image_type: Optional[ImageType] = None
    __properties = ["ssh_public_key", "static_network_config", "image_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImageCreateParams:
        """Create an instance of ImageCreateParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in static_network_config (list)
        _items = []
        if self.static_network_config:
            for _item in self.static_network_config:
                if _item:
                    _items.append(_item.to_dict())
            _dict['static_network_config'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImageCreateParams:
        """Create an instance of ImageCreateParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImageCreateParams.parse_obj(obj)

        _obj = ImageCreateParams.parse_obj({
            "ssh_public_key": obj.get("ssh_public_key"),
            "static_network_config": [HostStaticNetworkConfig.from_dict(_item) for _item in obj.get("static_network_config")] if obj.get("static_network_config") is not None else None,
            "image_type": obj.get("image_type")
        })
        return _obj


