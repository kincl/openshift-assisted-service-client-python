# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint
from openshift_assisted_service.models.image_type import ImageType

class ImageInfo(BaseModel):
    """
    ImageInfo
    """
    ssh_public_key: Optional[StrictStr] = Field(None, description="SSH public key for debugging the installation.")
    size_bytes: Optional[conint(strict=True, ge=0)] = None
    download_url: Optional[StrictStr] = None
    generator_version: Optional[StrictStr] = Field(None, description="Image generator version.")
    created_at: Optional[datetime] = None
    expires_at: Optional[datetime] = None
    static_network_config: Optional[StrictStr] = Field(None, description="static network configuration string in the format expected by discovery ignition generation")
    type: Optional[ImageType] = None
    __properties = ["ssh_public_key", "size_bytes", "download_url", "generator_version", "created_at", "expires_at", "static_network_config", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImageInfo:
        """Create an instance of ImageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImageInfo:
        """Create an instance of ImageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImageInfo.parse_obj(obj)

        _obj = ImageInfo.parse_obj({
            "ssh_public_key": obj.get("ssh_public_key"),
            "size_bytes": obj.get("size_bytes"),
            "download_url": obj.get("download_url"),
            "generator_version": obj.get("generator_version"),
            "created_at": obj.get("created_at"),
            "expires_at": obj.get("expires_at"),
            "static_network_config": obj.get("static_network_config"),
            "type": obj.get("type")
        })
        return _obj


