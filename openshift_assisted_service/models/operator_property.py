# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator

class OperatorProperty(BaseModel):
    """
    OperatorProperty
    """
    name: Optional[StrictStr] = Field(None, description="Name of the property")
    data_type: Optional[StrictStr] = Field(None, description="Type of the property")
    mandatory: Optional[StrictBool] = Field(None, description="Indicates whether the property is reqired")
    options: Optional[conlist(StrictStr)] = Field(None, description="Values to select from")
    description: Optional[StrictStr] = Field(None, description="Description of a property")
    default_value: Optional[StrictStr] = Field(None, description="Default value for the property")
    __properties = ["name", "data_type", "mandatory", "options", "description", "default_value"]

    @validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('boolean', 'string', 'integer', 'float'):
            raise ValueError("must be one of enum values ('boolean', 'string', 'integer', 'float')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OperatorProperty:
        """Create an instance of OperatorProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OperatorProperty:
        """Create an instance of OperatorProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OperatorProperty.parse_obj(obj)

        _obj = OperatorProperty.parse_obj({
            "name": obj.get("name"),
            "data_type": obj.get("data_type"),
            "mandatory": obj.get("mandatory"),
            "options": obj.get("options"),
            "description": obj.get("description"),
            "default_value": obj.get("default_value")
        })
        return _obj


