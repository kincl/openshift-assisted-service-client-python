# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator

class OpenshiftVersion(BaseModel):
    """
    OpenshiftVersion
    """
    display_name: StrictStr = Field(..., description="Name of the version to be presented to the user.")
    support_level: StrictStr = Field(..., description="Level of support of the version.")
    default: Optional[StrictBool] = Field(None, description="Indication that the version is the recommended one.")
    cpu_architectures: conlist(StrictStr) = Field(..., description="Available CPU architectures.")
    __properties = ["display_name", "support_level", "default", "cpu_architectures"]

    @validator('support_level')
    def support_level_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('beta', 'production', 'maintenance'):
            raise ValueError("must be one of enum values ('beta', 'production', 'maintenance')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenshiftVersion:
        """Create an instance of OpenshiftVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenshiftVersion:
        """Create an instance of OpenshiftVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenshiftVersion.parse_obj(obj)

        _obj = OpenshiftVersion.parse_obj({
            "display_name": obj.get("display_name"),
            "support_level": obj.get("support_level"),
            "default": obj.get("default"),
            "cpu_architectures": obj.get("cpu_architectures")
        })
        return _obj


