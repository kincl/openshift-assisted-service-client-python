# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openshift_assisted_service.models.upgrade_agent_result import UpgradeAgentResult

class UpgradeAgentResponse(BaseModel):
    """
    UpgradeAgentResponse
    """
    agent_image: Optional[StrictStr] = Field(None, description="Full image reference of the image that the agent has upgraded to, for example `quay.io/registry-proxy.engineering.redhat.com/rh-osbs/openshift4-assisted-installer-agent-rhel8:v1.0.0-142`. ")
    result: Optional[UpgradeAgentResult] = None
    __properties = ["agent_image", "result"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpgradeAgentResponse:
        """Create an instance of UpgradeAgentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpgradeAgentResponse:
        """Create an instance of UpgradeAgentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpgradeAgentResponse.parse_obj(obj)

        _obj = UpgradeAgentResponse.parse_obj({
            "agent_image": obj.get("agent_image"),
            "result": obj.get("result")
        })
        return _obj


