# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openshift_assisted_service.models.cluster_host_requirements_details import ClusterHostRequirementsDetails

class VersionedHostRequirements(BaseModel):
    """
    VersionedHostRequirements
    """
    version: Optional[StrictStr] = Field(None, description="Version of the component for which requirements are defined")
    master: Optional[ClusterHostRequirementsDetails] = None
    worker: Optional[ClusterHostRequirementsDetails] = None
    sno: Optional[ClusterHostRequirementsDetails] = None
    edge_worker: Optional[ClusterHostRequirementsDetails] = Field(None, alias="edge-worker")
    __properties = ["version", "master", "worker", "sno", "edge-worker"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VersionedHostRequirements:
        """Create an instance of VersionedHostRequirements from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of master
        if self.master:
            _dict['master'] = self.master.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker
        if self.worker:
            _dict['worker'] = self.worker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sno
        if self.sno:
            _dict['sno'] = self.sno.to_dict()
        # override the default output from pydantic by calling `to_dict()` of edge_worker
        if self.edge_worker:
            _dict['edge-worker'] = self.edge_worker.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VersionedHostRequirements:
        """Create an instance of VersionedHostRequirements from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VersionedHostRequirements.parse_obj(obj)

        _obj = VersionedHostRequirements.parse_obj({
            "version": obj.get("version"),
            "master": ClusterHostRequirementsDetails.from_dict(obj.get("master")) if obj.get("master") is not None else None,
            "worker": ClusterHostRequirementsDetails.from_dict(obj.get("worker")) if obj.get("worker") is not None else None,
            "sno": ClusterHostRequirementsDetails.from_dict(obj.get("sno")) if obj.get("sno") is not None else None,
            "edge_worker": ClusterHostRequirementsDetails.from_dict(obj.get("edge-worker")) if obj.get("edge-worker") is not None else None
        })
        return _obj


