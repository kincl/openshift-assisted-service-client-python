# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class ApiVipConnectivityRequest(BaseModel):
    """
    ApiVipConnectivityRequest
    """
    url: StrictStr = Field(..., description="URL address of the API.")
    verify_cidr: Optional[StrictBool] = Field(None, description="Whether to verify if the API VIP belongs to one of the interfaces (DEPRECATED).")
    ca_certificate: Optional[StrictStr] = Field(None, description="A CA certficate to be used when contacting the URL via https.")
    ignition_endpoint_token: Optional[StrictStr] = Field(None, description="A string which will be used as Authorization Bearer token to fetch the ignition from ignition_endpoint_url.")
    __properties = ["url", "verify_cidr", "ca_certificate", "ignition_endpoint_token"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiVipConnectivityRequest:
        """Create an instance of ApiVipConnectivityRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if ca_certificate (nullable) is None
        # and __fields_set__ contains the field
        if self.ca_certificate is None and "ca_certificate" in self.__fields_set__:
            _dict['ca_certificate'] = None

        # set to None if ignition_endpoint_token (nullable) is None
        # and __fields_set__ contains the field
        if self.ignition_endpoint_token is None and "ignition_endpoint_token" in self.__fields_set__:
            _dict['ignition_endpoint_token'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiVipConnectivityRequest:
        """Create an instance of ApiVipConnectivityRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiVipConnectivityRequest.parse_obj(obj)

        _obj = ApiVipConnectivityRequest.parse_obj({
            "url": obj.get("url"),
            "verify_cidr": obj.get("verify_cidr"),
            "ca_certificate": obj.get("ca_certificate"),
            "ignition_endpoint_token": obj.get("ignition_endpoint_token")
        })
        return _obj


