# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Proxy(BaseModel):
    """
    Proxy
    """
    http_proxy: Optional[StrictStr] = Field(None, description="A proxy URL to use for creating HTTP connections outside the cluster. http://\\<username\\>:\\<pswd\\>@\\<ip\\>:\\<port\\> ")
    https_proxy: Optional[StrictStr] = Field(None, description="A proxy URL to use for creating HTTPS connections outside the cluster. http://\\<username\\>:\\<pswd\\>@\\<ip\\>:\\<port\\> ")
    no_proxy: Optional[StrictStr] = Field(None, description="An \"*\" or a comma-separated list of destination domain names, domains, IP addresses, or other network CIDRs to exclude from proxying.")
    __properties = ["http_proxy", "https_proxy", "no_proxy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Proxy:
        """Create an instance of Proxy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if http_proxy (nullable) is None
        # and __fields_set__ contains the field
        if self.http_proxy is None and "http_proxy" in self.__fields_set__:
            _dict['http_proxy'] = None

        # set to None if https_proxy (nullable) is None
        # and __fields_set__ contains the field
        if self.https_proxy is None and "https_proxy" in self.__fields_set__:
            _dict['https_proxy'] = None

        # set to None if no_proxy (nullable) is None
        # and __fields_set__ contains the field
        if self.no_proxy is None and "no_proxy" in self.__fields_set__:
            _dict['no_proxy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Proxy:
        """Create an instance of Proxy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Proxy.parse_obj(obj)

        _obj = Proxy.parse_obj({
            "http_proxy": obj.get("http_proxy"),
            "https_proxy": obj.get("https_proxy"),
            "no_proxy": obj.get("no_proxy")
        })
        return _obj


