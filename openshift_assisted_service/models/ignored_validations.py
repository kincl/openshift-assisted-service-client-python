# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class IgnoredValidations(BaseModel):
    """
    IgnoredValidations
    """
    cluster_validation_ids: Optional[StrictStr] = Field(None, alias="cluster-validation-ids", description="JSON-formatted list of cluster validation IDs that will be ignored for all hosts that belong to this cluster. It may also contain a list with a single string \"all\" to ignore all cluster validations. Some validations cannot be ignored.")
    host_validation_ids: Optional[StrictStr] = Field(None, alias="host-validation-ids", description="JSON-formatted list of host validation IDs that will be ignored for all hosts that belong to this cluster. It may also contain a list with a single string \"all\" to ignore all host validations. Some validations cannot be ignored.")
    __properties = ["cluster-validation-ids", "host-validation-ids"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IgnoredValidations:
        """Create an instance of IgnoredValidations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IgnoredValidations:
        """Create an instance of IgnoredValidations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IgnoredValidations.parse_obj(obj)

        _obj = IgnoredValidations.parse_obj({
            "cluster_validation_ids": obj.get("cluster-validation-ids"),
            "host_validation_ids": obj.get("host-validation-ids")
        })
        return _obj


