# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from openshift_assisted_service.models.host_role import HostRole
from openshift_assisted_service.models.proxy import Proxy

class InstallCmdRequest(BaseModel):
    """
    InstallCmdRequest
    """
    cluster_id: StrictStr = Field(..., description="Cluster id")
    infra_env_id: StrictStr = Field(..., description="Infra env id")
    host_id: StrictStr = Field(..., description="Host id")
    role: HostRole = Field(...)
    boot_device: StrictStr = Field(..., description="Boot device to write image on")
    controller_image: constr(strict=True) = Field(..., description="Assisted installer controller image")
    installer_image: constr(strict=True) = Field(..., description="Assisted installer image")
    high_availability_mode: Optional[StrictStr] = Field('Full', description="Guaranteed availability of the installed cluster. 'Full' installs a Highly-Available cluster over multiple master nodes whereas 'None' installs a full cluster over one node. ")
    proxy: Optional[Proxy] = None
    check_cvo: Optional[StrictBool] = Field(True, description="Check CVO status if needed")
    disks_to_format: Optional[conlist(StrictStr)] = Field(None, description="List of disks to format")
    must_gather_image: Optional[StrictStr] = Field(None, description="Must-gather images to use")
    mco_image: Optional[constr(strict=True)] = Field(None, description="Machine config operator image")
    openshift_version: Optional[StrictStr] = Field(None, description="Version of the OpenShift cluster.")
    service_ips: Optional[conlist(constr(strict=True))] = Field(None, description="List of service ips")
    installer_args: Optional[StrictStr] = Field(None, description="Core-os installer addtional args")
    skip_installation_disk_cleanup: Optional[StrictBool] = Field(None, description="Skip formatting installation disk")
    __properties = ["cluster_id", "infra_env_id", "host_id", "role", "boot_device", "controller_image", "installer_image", "high_availability_mode", "proxy", "check_cvo", "disks_to_format", "must_gather_image", "mco_image", "openshift_version", "service_ips", "installer_args", "skip_installation_disk_cleanup"]

    @validator('controller_image')
    def controller_image_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(([a-zA-Z0-9\-\.]+)(:[0-9]+)?\/)?[a-z0-9\._\-\/@]+[?::a-zA-Z0-9_\-.]+$", value):
            raise ValueError(r"must validate the regular expression /^(([a-zA-Z0-9\-\.]+)(:[0-9]+)?\/)?[a-z0-9\._\-\/@]+[?::a-zA-Z0-9_\-.]+$/")
        return value

    @validator('installer_image')
    def installer_image_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(([a-zA-Z0-9\-\.]+)(:[0-9]+)?\/)?[a-z0-9\._\-\/@]+[?::a-zA-Z0-9_\-.]+$", value):
            raise ValueError(r"must validate the regular expression /^(([a-zA-Z0-9\-\.]+)(:[0-9]+)?\/)?[a-z0-9\._\-\/@]+[?::a-zA-Z0-9_\-.]+$/")
        return value

    @validator('high_availability_mode')
    def high_availability_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Full', 'None'):
            raise ValueError("must be one of enum values ('Full', 'None')")
        return value

    @validator('mco_image')
    def mco_image_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(([a-zA-Z0-9\-\.]+)(:[0-9]+)?\/)?[a-z0-9\._\-\/@]+[?::a-zA-Z0-9_\-.]+$", value):
            raise ValueError(r"must validate the regular expression /^(([a-zA-Z0-9\-\.]+)(:[0-9]+)?\/)?[a-z0-9\._\-\/@]+[?::a-zA-Z0-9_\-.]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InstallCmdRequest:
        """Create an instance of InstallCmdRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of proxy
        if self.proxy:
            _dict['proxy'] = self.proxy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InstallCmdRequest:
        """Create an instance of InstallCmdRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InstallCmdRequest.parse_obj(obj)

        _obj = InstallCmdRequest.parse_obj({
            "cluster_id": obj.get("cluster_id"),
            "infra_env_id": obj.get("infra_env_id"),
            "host_id": obj.get("host_id"),
            "role": obj.get("role"),
            "boot_device": obj.get("boot_device"),
            "controller_image": obj.get("controller_image"),
            "installer_image": obj.get("installer_image"),
            "high_availability_mode": obj.get("high_availability_mode") if obj.get("high_availability_mode") is not None else 'Full',
            "proxy": Proxy.from_dict(obj.get("proxy")) if obj.get("proxy") is not None else None,
            "check_cvo": obj.get("check_cvo") if obj.get("check_cvo") is not None else True,
            "disks_to_format": obj.get("disks_to_format"),
            "must_gather_image": obj.get("must_gather_image"),
            "mco_image": obj.get("mco_image"),
            "openshift_version": obj.get("openshift_version"),
            "service_ips": obj.get("service_ips"),
            "installer_args": obj.get("installer_args"),
            "skip_installation_disk_cleanup": obj.get("skip_installation_disk_cleanup")
        })
        return _obj


