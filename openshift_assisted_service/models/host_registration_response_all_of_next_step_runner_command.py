# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class HostRegistrationResponseAllOfNextStepRunnerCommand(BaseModel):
    """
    Command for starting the next step runner
    """
    command: Optional[StrictStr] = None
    args: Optional[conlist(StrictStr)] = None
    retry_seconds: Optional[StrictInt] = Field(None, description="How long in seconds to wait before retrying registration if the command fails")
    __properties = ["command", "args", "retry_seconds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HostRegistrationResponseAllOfNextStepRunnerCommand:
        """Create an instance of HostRegistrationResponseAllOfNextStepRunnerCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HostRegistrationResponseAllOfNextStepRunnerCommand:
        """Create an instance of HostRegistrationResponseAllOfNextStepRunnerCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HostRegistrationResponseAllOfNextStepRunnerCommand.parse_obj(obj)

        _obj = HostRegistrationResponseAllOfNextStepRunnerCommand.parse_obj({
            "command": obj.get("command"),
            "args": obj.get("args"),
            "retry_seconds": obj.get("retry_seconds")
        })
        return _obj


