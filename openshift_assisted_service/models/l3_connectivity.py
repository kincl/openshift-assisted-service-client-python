# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class L3Connectivity(BaseModel):
    """
    L3Connectivity
    """
    outgoing_nic: Optional[StrictStr] = None
    remote_ip_address: Optional[StrictStr] = None
    successful: Optional[StrictBool] = None
    average_rtt_ms: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Average round trip time in milliseconds.")
    packet_loss_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Percentage of packets lost during connectivity check.")
    __properties = ["outgoing_nic", "remote_ip_address", "successful", "average_rtt_ms", "packet_loss_percentage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> L3Connectivity:
        """Create an instance of L3Connectivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> L3Connectivity:
        """Create an instance of L3Connectivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return L3Connectivity.parse_obj(obj)

        _obj = L3Connectivity.parse_obj({
            "outgoing_nic": obj.get("outgoing_nic"),
            "remote_ip_address": obj.get("remote_ip_address"),
            "successful": obj.get("successful"),
            "average_rtt_ms": obj.get("average_rtt_ms"),
            "packet_loss_percentage": obj.get("packet_loss_percentage")
        })
        return _obj


