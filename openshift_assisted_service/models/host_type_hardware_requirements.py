# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openshift_assisted_service.models.cluster_host_requirements_details import ClusterHostRequirementsDetails

class HostTypeHardwareRequirements(BaseModel):
    """
    HostTypeHardwareRequirements
    """
    quantitative: Optional[ClusterHostRequirementsDetails] = None
    qualitative: Optional[conlist(StrictStr)] = Field(None, description="Host requirements that cannot be quantified at the time of calculation. Descriptions or formulas of requiements")
    __properties = ["quantitative", "qualitative"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HostTypeHardwareRequirements:
        """Create an instance of HostTypeHardwareRequirements from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of quantitative
        if self.quantitative:
            _dict['quantitative'] = self.quantitative.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HostTypeHardwareRequirements:
        """Create an instance of HostTypeHardwareRequirements from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HostTypeHardwareRequirements.parse_obj(obj)

        _obj = HostTypeHardwareRequirements.parse_obj({
            "quantitative": ClusterHostRequirementsDetails.from_dict(obj.get("quantitative")) if obj.get("quantitative") is not None else None,
            "qualitative": obj.get("qualitative")
        })
        return _obj


