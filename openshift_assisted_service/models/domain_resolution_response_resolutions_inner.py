# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class DomainResolutionResponseResolutionsInner(BaseModel):
    """
    DomainResolutionResponseResolutionsInner
    """
    domain_name: StrictStr = Field(..., description="The domain that was resolved")
    ipv4_addresses: Optional[conlist(StrictStr)] = Field(None, description="The IPv4 addresses of the domain, empty if none")
    ipv6_addresses: Optional[conlist(StrictStr)] = Field(None, description="The IPv6 addresses of the domain, empty if none")
    __properties = ["domain_name", "ipv4_addresses", "ipv6_addresses"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DomainResolutionResponseResolutionsInner:
        """Create an instance of DomainResolutionResponseResolutionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DomainResolutionResponseResolutionsInner:
        """Create an instance of DomainResolutionResponseResolutionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DomainResolutionResponseResolutionsInner.parse_obj(obj)

        _obj = DomainResolutionResponseResolutionsInner.parse_obj({
            "domain_name": obj.get("domain_name"),
            "ipv4_addresses": obj.get("ipv4_addresses"),
            "ipv6_addresses": obj.get("ipv6_addresses")
        })
        return _obj


