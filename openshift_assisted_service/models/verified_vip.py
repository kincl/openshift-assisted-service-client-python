# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, constr, validator
from openshift_assisted_service.models.vip_type import VipType
from openshift_assisted_service.models.vip_verification import VipVerification

class VerifiedVip(BaseModel):
    """
    Single VIP verification result.
    """
    vip: Optional[constr(strict=True)] = None
    vip_type: Optional[VipType] = None
    verification: Optional[VipVerification] = None
    __properties = ["vip", "vip_type", "verification"]

    @validator('vip')
    def vip_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3})|(?:(?:[0-9a-fA-F]*:[0-9a-fA-F]*){2,}))?$", value):
            raise ValueError(r"must validate the regular expression /^(?:(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3})|(?:(?:[0-9a-fA-F]*:[0-9a-fA-F]*){2,}))?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VerifiedVip:
        """Create an instance of VerifiedVip from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VerifiedVip:
        """Create an instance of VerifiedVip from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VerifiedVip.parse_obj(obj)

        _obj = VerifiedVip.parse_obj({
            "vip": obj.get("vip"),
            "vip_type": obj.get("vip_type"),
            "verification": obj.get("verification")
        })
        return _obj


