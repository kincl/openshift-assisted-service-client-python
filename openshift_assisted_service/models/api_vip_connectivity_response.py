# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class ApiVipConnectivityResponse(BaseModel):
    """
    The response from the day-2 agent's attempt to download the worker ignition file from the API machine config server of the target cluster. Note - the name \"API VIP connectivity\" is old and misleading and is preserved for backwards compatibility.
    """
    is_success: Optional[StrictBool] = Field(None, description="Whether the agent was able to download the ignition or not")
    url: Optional[StrictStr] = Field(None, description="This parameter mirrors the url parameter of the corresponding api_vip_connectivity_request")
    download_error: Optional[StrictStr] = Field(None, description="The error that occurred while downloading the worker ignition file, ignored when is_success is true")
    ignition: Optional[StrictStr] = Field(None, description="Ignition file fetched from the target cluster's API machine config server. This ignition file may be incomplete as almost all files / systemd units are removed from it by the agent in order to save space.")
    __properties = ["is_success", "url", "download_error", "ignition"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiVipConnectivityResponse:
        """Create an instance of ApiVipConnectivityResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiVipConnectivityResponse:
        """Create an instance of ApiVipConnectivityResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiVipConnectivityResponse.parse_obj(obj)

        _obj = ApiVipConnectivityResponse.parse_obj({
            "is_success": obj.get("is_success"),
            "url": obj.get("url"),
            "download_error": obj.get("download_error"),
            "ignition": obj.get("ignition")
        })
        return _obj


