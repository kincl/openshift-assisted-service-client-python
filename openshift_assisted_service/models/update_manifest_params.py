# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class UpdateManifestParams(BaseModel):
    """
    UpdateManifestParams
    """
    folder: StrictStr = Field(..., description="The folder for the manifest to modify.")
    file_name: constr(strict=True) = Field(..., description="The file name for the manifest to modify.")
    updated_folder: Optional[StrictStr] = Field('manifests', description="The new folder for the manifest. Manifests can be placed in 'manifests' or 'openshift' directories.")
    updated_file_name: Optional[constr(strict=True)] = Field(None, description="The new file name for the manifest.")
    updated_content: Optional[StrictStr] = Field(None, description="The new base64 encoded manifest content.")
    __properties = ["folder", "file_name", "updated_folder", "updated_file_name", "updated_content"]

    @validator('folder')
    def folder_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('manifests', 'openshift'):
            raise ValueError("must be one of enum values ('manifests', 'openshift')")
        return value

    @validator('file_name')
    def file_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[^\/]*\.(yaml|yml|json)$", value):
            raise ValueError(r"must validate the regular expression /^[^\/]*\.(yaml|yml|json)$/")
        return value

    @validator('updated_folder')
    def updated_folder_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('manifests', 'openshift'):
            raise ValueError("must be one of enum values ('manifests', 'openshift')")
        return value

    @validator('updated_file_name')
    def updated_file_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^\/]*\.(yaml|yml|json)$", value):
            raise ValueError(r"must validate the regular expression /^[^\/]*\.(yaml|yml|json)$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateManifestParams:
        """Create an instance of UpdateManifestParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if updated_folder (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_folder is None and "updated_folder" in self.__fields_set__:
            _dict['updated_folder'] = None

        # set to None if updated_file_name (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_file_name is None and "updated_file_name" in self.__fields_set__:
            _dict['updated_file_name'] = None

        # set to None if updated_content (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_content is None and "updated_content" in self.__fields_set__:
            _dict['updated_content'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateManifestParams:
        """Create an instance of UpdateManifestParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateManifestParams.parse_obj(obj)

        _obj = UpdateManifestParams.parse_obj({
            "folder": obj.get("folder") if obj.get("folder") is not None else 'manifests',
            "file_name": obj.get("file_name"),
            "updated_folder": obj.get("updated_folder") if obj.get("updated_folder") is not None else 'manifests',
            "updated_file_name": obj.get("updated_file_name"),
            "updated_content": obj.get("updated_content")
        })
        return _obj


