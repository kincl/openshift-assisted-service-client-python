# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from openshift_assisted_service.models.l2_connectivity import L2Connectivity
from openshift_assisted_service.models.l3_connectivity import L3Connectivity

class ConnectivityRemoteHost(BaseModel):
    """
    ConnectivityRemoteHost
    """
    host_id: Optional[StrictStr] = None
    l2_connectivity: Optional[conlist(L2Connectivity)] = None
    l3_connectivity: Optional[conlist(L3Connectivity)] = None
    __properties = ["host_id", "l2_connectivity", "l3_connectivity"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConnectivityRemoteHost:
        """Create an instance of ConnectivityRemoteHost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in l2_connectivity (list)
        _items = []
        if self.l2_connectivity:
            for _item in self.l2_connectivity:
                if _item:
                    _items.append(_item.to_dict())
            _dict['l2_connectivity'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in l3_connectivity (list)
        _items = []
        if self.l3_connectivity:
            for _item in self.l3_connectivity:
                if _item:
                    _items.append(_item.to_dict())
            _dict['l3_connectivity'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConnectivityRemoteHost:
        """Create an instance of ConnectivityRemoteHost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConnectivityRemoteHost.parse_obj(obj)

        _obj = ConnectivityRemoteHost.parse_obj({
            "host_id": obj.get("host_id"),
            "l2_connectivity": [L2Connectivity.from_dict(_item) for _item in obj.get("l2_connectivity")] if obj.get("l2_connectivity") is not None else None,
            "l3_connectivity": [L3Connectivity.from_dict(_item) for _item in obj.get("l3_connectivity")] if obj.get("l3_connectivity") is not None else None
        })
        return _obj


