# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr, validator

class DomainResolutionRequestDomainsInner(BaseModel):
    """
    DomainResolutionRequestDomainsInner
    """
    domain_name: constr(strict=True) = Field(..., description="The domain name that should be resolved")
    __properties = ["domain_name"]

    @validator('domain_name')
    def domain_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*[.])+[a-zA-Z]{2,}[.]?$", value):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*[.])+[a-zA-Z]{2,}[.]?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DomainResolutionRequestDomainsInner:
        """Create an instance of DomainResolutionRequestDomainsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DomainResolutionRequestDomainsInner:
        """Create an instance of DomainResolutionRequestDomainsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DomainResolutionRequestDomainsInner.parse_obj(obj)

        _obj = DomainResolutionRequestDomainsInner.parse_obj({
            "domain_name": obj.get("domain_name")
        })
        return _obj


