# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openshift_assisted_service.models.host_stage import HostStage

class HostProgressInfo(BaseModel):
    """
    HostProgressInfo
    """
    installation_percentage: Optional[StrictInt] = None
    current_stage: Optional[HostStage] = None
    progress_info: Optional[StrictStr] = None
    stage_started_at: Optional[datetime] = Field(None, description="Time at which the current progress stage started.")
    stage_updated_at: Optional[datetime] = Field(None, description="Time at which the current progress stage was last updated.")
    __properties = ["installation_percentage", "current_stage", "progress_info", "stage_started_at", "stage_updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HostProgressInfo:
        """Create an instance of HostProgressInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HostProgressInfo:
        """Create an instance of HostProgressInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HostProgressInfo.parse_obj(obj)

        _obj = HostProgressInfo.parse_obj({
            "installation_percentage": obj.get("installation_percentage"),
            "current_stage": obj.get("current_stage"),
            "progress_info": obj.get("progress_info"),
            "stage_started_at": obj.get("stage_started_at"),
            "stage_updated_at": obj.get("stage_updated_at")
        })
        return _obj


