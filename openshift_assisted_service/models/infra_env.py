# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, validator
from openshift_assisted_service.models.image_type import ImageType
from openshift_assisted_service.models.proxy import Proxy

class InfraEnv(BaseModel):
    """
    InfraEnv
    """
    kind: StrictStr = Field(..., description="Indicates the type of this object.")
    id: StrictStr = Field(..., description="Unique identifier of the object.")
    href: StrictStr = Field(..., description="Self link.")
    openshift_version: Optional[StrictStr] = Field(None, description="Version of the OpenShift cluster (used to infer the RHCOS version - temporary until generic logic implemented).")
    name: StrictStr = Field(..., description="Name of the infra-env.")
    user_name: Optional[StrictStr] = None
    org_id: Optional[StrictStr] = None
    email_domain: Optional[StrictStr] = None
    proxy: Optional[Proxy] = None
    additional_ntp_sources: Optional[StrictStr] = Field(None, description="A comma-separated list of NTP sources (name or IP) going to be added to all the hosts.")
    ssh_authorized_key: Optional[StrictStr] = Field(None, description="SSH public key for debugging the installation.")
    pull_secret_set: Optional[StrictBool] = Field(None, description="True if the pull secret has been added to the cluster.")
    static_network_config: Optional[StrictStr] = Field(None, description="static network configuration string in the format expected by discovery ignition generation.")
    type: ImageType = Field(...)
    ignition_config_override: Optional[StrictStr] = Field(None, description="Json formatted string containing the user overrides for the initial ignition config.")
    cluster_id: Optional[StrictStr] = Field(None, description="If set, all hosts that register will be associated with the specified cluster.")
    size_bytes: Optional[conint(strict=True, ge=0)] = None
    download_url: Optional[StrictStr] = None
    generator_version: Optional[StrictStr] = Field(None, description="Image generator version.")
    updated_at: datetime = Field(..., description="The last time that this infra-env was updated.")
    created_at: datetime = Field(...)
    expires_at: Optional[datetime] = None
    cpu_architecture: Optional[StrictStr] = Field('x86_64', description="The CPU architecture of the image (x86_64/arm64/etc).")
    kernel_arguments: Optional[StrictStr] = Field(None, description="JSON formatted string array representing the discovery image kernel arguments.")
    additional_trust_bundle: Optional[StrictStr] = Field(None, description="PEM-encoded X.509 certificate bundle. Hosts discovered by this infra-env will trust the certificates in this bundle. Clusters formed from the hosts discovered by this infra-env will also trust the certificates in this bundle.")
    __properties = ["kind", "id", "href", "openshift_version", "name", "user_name", "org_id", "email_domain", "proxy", "additional_ntp_sources", "ssh_authorized_key", "pull_secret_set", "static_network_config", "type", "ignition_config_override", "cluster_id", "size_bytes", "download_url", "generator_version", "updated_at", "created_at", "expires_at", "cpu_architecture", "kernel_arguments", "additional_trust_bundle"]

    @validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('InfraEnv'):
            raise ValueError("must be one of enum values ('InfraEnv')")
        return value

    @validator('cpu_architecture')
    def cpu_architecture_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('x86_64', 'aarch64', 'arm64', 'ppc64le', 's390x'):
            raise ValueError("must be one of enum values ('x86_64', 'aarch64', 'arm64', 'ppc64le', 's390x')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InfraEnv:
        """Create an instance of InfraEnv from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of proxy
        if self.proxy:
            _dict['proxy'] = self.proxy.to_dict()
        # set to None if kernel_arguments (nullable) is None
        # and __fields_set__ contains the field
        if self.kernel_arguments is None and "kernel_arguments" in self.__fields_set__:
            _dict['kernel_arguments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InfraEnv:
        """Create an instance of InfraEnv from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InfraEnv.parse_obj(obj)

        _obj = InfraEnv.parse_obj({
            "kind": obj.get("kind"),
            "id": obj.get("id"),
            "href": obj.get("href"),
            "openshift_version": obj.get("openshift_version"),
            "name": obj.get("name"),
            "user_name": obj.get("user_name"),
            "org_id": obj.get("org_id"),
            "email_domain": obj.get("email_domain"),
            "proxy": Proxy.from_dict(obj.get("proxy")) if obj.get("proxy") is not None else None,
            "additional_ntp_sources": obj.get("additional_ntp_sources"),
            "ssh_authorized_key": obj.get("ssh_authorized_key"),
            "pull_secret_set": obj.get("pull_secret_set"),
            "static_network_config": obj.get("static_network_config"),
            "type": obj.get("type"),
            "ignition_config_override": obj.get("ignition_config_override"),
            "cluster_id": obj.get("cluster_id"),
            "size_bytes": obj.get("size_bytes"),
            "download_url": obj.get("download_url"),
            "generator_version": obj.get("generator_version"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at"),
            "expires_at": obj.get("expires_at"),
            "cpu_architecture": obj.get("cpu_architecture") if obj.get("cpu_architecture") is not None else 'x86_64',
            "kernel_arguments": obj.get("kernel_arguments"),
            "additional_trust_bundle": obj.get("additional_trust_bundle")
        })
        return _obj


