# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openshift_assisted_service.models.disk_config_params import DiskConfigParams
from openshift_assisted_service.models.disk_skip_formatting_params import DiskSkipFormattingParams
from openshift_assisted_service.models.node_label_params import NodeLabelParams

class HostUpdateParams(BaseModel):
    """
    HostUpdateParams
    """
    host_role: Optional[StrictStr] = None
    host_name: Optional[StrictStr] = None
    disks_selected_config: Optional[conlist(DiskConfigParams)] = None
    disks_skip_formatting: Optional[conlist(DiskSkipFormattingParams)] = Field(None, description="Allows changing the host's skip_formatting_disks parameter")
    machine_config_pool_name: Optional[StrictStr] = None
    ignition_endpoint_token: Optional[StrictStr] = Field(None, description="A string which will be used as Authorization Bearer token to fetch the ignition from ignition_endpoint_url.")
    node_labels: Optional[conlist(NodeLabelParams)] = Field(None, description="Labels to be added to the corresponding node.")
    __properties = ["host_role", "host_name", "disks_selected_config", "disks_skip_formatting", "machine_config_pool_name", "ignition_endpoint_token", "node_labels"]

    @validator('host_role')
    def host_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('auto-assign', 'master', 'worker'):
            raise ValueError("must be one of enum values ('auto-assign', 'master', 'worker')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HostUpdateParams:
        """Create an instance of HostUpdateParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in disks_selected_config (list)
        _items = []
        if self.disks_selected_config:
            for _item in self.disks_selected_config:
                if _item:
                    _items.append(_item.to_dict())
            _dict['disks_selected_config'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in disks_skip_formatting (list)
        _items = []
        if self.disks_skip_formatting:
            for _item in self.disks_skip_formatting:
                if _item:
                    _items.append(_item.to_dict())
            _dict['disks_skip_formatting'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in node_labels (list)
        _items = []
        if self.node_labels:
            for _item in self.node_labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['node_labels'] = _items
        # set to None if host_role (nullable) is None
        # and __fields_set__ contains the field
        if self.host_role is None and "host_role" in self.__fields_set__:
            _dict['host_role'] = None

        # set to None if host_name (nullable) is None
        # and __fields_set__ contains the field
        if self.host_name is None and "host_name" in self.__fields_set__:
            _dict['host_name'] = None

        # set to None if disks_selected_config (nullable) is None
        # and __fields_set__ contains the field
        if self.disks_selected_config is None and "disks_selected_config" in self.__fields_set__:
            _dict['disks_selected_config'] = None

        # set to None if disks_skip_formatting (nullable) is None
        # and __fields_set__ contains the field
        if self.disks_skip_formatting is None and "disks_skip_formatting" in self.__fields_set__:
            _dict['disks_skip_formatting'] = None

        # set to None if machine_config_pool_name (nullable) is None
        # and __fields_set__ contains the field
        if self.machine_config_pool_name is None and "machine_config_pool_name" in self.__fields_set__:
            _dict['machine_config_pool_name'] = None

        # set to None if ignition_endpoint_token (nullable) is None
        # and __fields_set__ contains the field
        if self.ignition_endpoint_token is None and "ignition_endpoint_token" in self.__fields_set__:
            _dict['ignition_endpoint_token'] = None

        # set to None if node_labels (nullable) is None
        # and __fields_set__ contains the field
        if self.node_labels is None and "node_labels" in self.__fields_set__:
            _dict['node_labels'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HostUpdateParams:
        """Create an instance of HostUpdateParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HostUpdateParams.parse_obj(obj)

        _obj = HostUpdateParams.parse_obj({
            "host_role": obj.get("host_role"),
            "host_name": obj.get("host_name"),
            "disks_selected_config": [DiskConfigParams.from_dict(_item) for _item in obj.get("disks_selected_config")] if obj.get("disks_selected_config") is not None else None,
            "disks_skip_formatting": [DiskSkipFormattingParams.from_dict(_item) for _item in obj.get("disks_skip_formatting")] if obj.get("disks_skip_formatting") is not None else None,
            "machine_config_pool_name": obj.get("machine_config_pool_name"),
            "ignition_endpoint_token": obj.get("ignition_endpoint_token"),
            "node_labels": [NodeLabelParams.from_dict(_item) for _item in obj.get("node_labels")] if obj.get("node_labels") is not None else None
        })
        return _obj


