# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class KernelArgument(BaseModel):
    """
    pair of [operation, argument] specifying the argument and what operation should be applied on it.
    """
    operation: Optional[StrictStr] = Field(None, description="The operation to apply on the kernel argument.")
    value: Optional[constr(strict=True)] = Field(None, description="Kernel argument can have the form <parameter> or <parameter>=<value>. The following examples should be supported: rd.net.timeout.carrier=60 isolcpus=1,2,10-20,100-2000:2/25 quiet The parsing by the command line parser in linux kernel is much looser and this pattern follows it. ")
    __properties = ["operation", "value"]

    @validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('append', 'replace', 'delete'):
            raise ValueError("must be one of enum values ('append', 'replace', 'delete')")
        return value

    @validator('value')
    def value_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:(?:[^ \t\n\r\"]+)|(?:\"[^\"]*\"))+$", value):
            raise ValueError(r"must validate the regular expression /^(?:(?:[^ \t\n\r\"]+)|(?:\"[^\"]*\"))+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> KernelArgument:
        """Create an instance of KernelArgument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> KernelArgument:
        """Create an instance of KernelArgument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return KernelArgument.parse_obj(obj)

        _obj = KernelArgument.parse_obj({
            "operation": obj.get("operation"),
            "value": obj.get("value")
        })
        return _obj


