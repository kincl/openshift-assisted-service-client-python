# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from openshift_assisted_service.models.tang_connectivity_response_tang_server_response_inner import TangConnectivityResponseTangServerResponseInner

class TangConnectivityResponse(BaseModel):
    """
    TangConnectivityResponse
    """
    is_success: Optional[StrictBool] = Field(None, description="Tang check result.")
    tang_server_response: Optional[conlist(TangConnectivityResponseTangServerResponseInner)] = None
    __properties = ["is_success", "tang_server_response"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TangConnectivityResponse:
        """Create an instance of TangConnectivityResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tang_server_response (list)
        _items = []
        if self.tang_server_response:
            for _item in self.tang_server_response:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tang_server_response'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TangConnectivityResponse:
        """Create an instance of TangConnectivityResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TangConnectivityResponse.parse_obj(obj)

        _obj = TangConnectivityResponse.parse_obj({
            "is_success": obj.get("is_success"),
            "tang_server_response": [TangConnectivityResponseTangServerResponseInner.from_dict(_item) for _item in obj.get("tang_server_response")] if obj.get("tang_server_response") is not None else None
        })
        return _obj


