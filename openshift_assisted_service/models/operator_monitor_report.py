# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openshift_assisted_service.models.operator_status import OperatorStatus

class OperatorMonitorReport(BaseModel):
    """
    OperatorMonitorReport
    """
    name: Optional[StrictStr] = Field(None, description="Unique name of the operator.")
    version: Optional[StrictStr] = Field(None, description="operator version.")
    status: Optional[OperatorStatus] = None
    status_info: Optional[StrictStr] = Field(None, description="Detailed information about the operator state.")
    __properties = ["name", "version", "status", "status_info"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OperatorMonitorReport:
        """Create an instance of OperatorMonitorReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OperatorMonitorReport:
        """Create an instance of OperatorMonitorReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OperatorMonitorReport.parse_obj(obj)

        _obj = OperatorMonitorReport.parse_obj({
            "name": obj.get("name"),
            "version": obj.get("version"),
            "status": obj.get("status"),
            "status_info": obj.get("status_info")
        })
        return _obj


