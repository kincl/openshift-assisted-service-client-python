# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class Event(BaseModel):
    """
    Event
    """
    name: Optional[StrictStr] = Field(None, description="Event Name.")
    cluster_id: Optional[StrictStr] = Field(None, description="Unique identifier of the cluster this event relates to.")
    host_id: Optional[StrictStr] = Field(None, description="Unique identifier of the host this event relates to.")
    infra_env_id: Optional[StrictStr] = Field(None, description="Unique identifier of the infra-env this event relates to.")
    severity: StrictStr = Field(...)
    category: Optional[StrictStr] = None
    message: StrictStr = Field(...)
    event_time: datetime = Field(...)
    request_id: Optional[StrictStr] = Field(None, description="Unique identifier of the request that caused this event to occur.")
    props: Optional[StrictStr] = Field(None, description="Additional properties for the event in JSON format.")
    __properties = ["name", "cluster_id", "host_id", "infra_env_id", "severity", "category", "message", "event_time", "request_id", "props"]

    @validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('info', 'warning', 'error', 'critical'):
            raise ValueError("must be one of enum values ('info', 'warning', 'error', 'critical')")
        return value

    @validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('user', 'metrics'):
            raise ValueError("must be one of enum values ('user', 'metrics')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Event:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if cluster_id (nullable) is None
        # and __fields_set__ contains the field
        if self.cluster_id is None and "cluster_id" in self.__fields_set__:
            _dict['cluster_id'] = None

        # set to None if host_id (nullable) is None
        # and __fields_set__ contains the field
        if self.host_id is None and "host_id" in self.__fields_set__:
            _dict['host_id'] = None

        # set to None if infra_env_id (nullable) is None
        # and __fields_set__ contains the field
        if self.infra_env_id is None and "infra_env_id" in self.__fields_set__:
            _dict['infra_env_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Event:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Event.parse_obj(obj)

        _obj = Event.parse_obj({
            "name": obj.get("name"),
            "cluster_id": obj.get("cluster_id"),
            "host_id": obj.get("host_id"),
            "infra_env_id": obj.get("infra_env_id"),
            "severity": obj.get("severity"),
            "category": obj.get("category"),
            "message": obj.get("message"),
            "event_time": obj.get("event_time"),
            "request_id": obj.get("request_id"),
            "props": obj.get("props")
        })
        return _obj


