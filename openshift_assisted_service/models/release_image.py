# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator

class ReleaseImage(BaseModel):
    """
    ReleaseImage
    """
    openshift_version: StrictStr = Field(..., description="Version of the OpenShift cluster.")
    cpu_architecture: StrictStr = Field(..., description="(DEPRECATED) The CPU architecture of the image (x86_64/arm64/etc).")
    cpu_architectures: Optional[conlist(StrictStr)] = Field(None, description="List of CPU architectures provided by the image.")
    url: StrictStr = Field(..., description="The installation image of the OpenShift cluster.")
    version: StrictStr = Field(..., description="OCP version from the release metadata.")
    default: Optional[StrictBool] = Field(None, description="Indication that the version is the recommended one.")
    support_level: Optional[StrictStr] = Field(None, description="Level of support of the version.")
    __properties = ["openshift_version", "cpu_architecture", "cpu_architectures", "url", "version", "default", "support_level"]

    @validator('cpu_architecture')
    def cpu_architecture_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('x86_64', 'aarch64', 'arm64', 'ppc64le', 's390x', 'multi'):
            raise ValueError("must be one of enum values ('x86_64', 'aarch64', 'arm64', 'ppc64le', 's390x', 'multi')")
        return value

    @validator('support_level')
    def support_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('beta', 'production', 'maintenance'):
            raise ValueError("must be one of enum values ('beta', 'production', 'maintenance')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReleaseImage:
        """Create an instance of ReleaseImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReleaseImage:
        """Create an instance of ReleaseImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReleaseImage.parse_obj(obj)

        _obj = ReleaseImage.parse_obj({
            "openshift_version": obj.get("openshift_version"),
            "cpu_architecture": obj.get("cpu_architecture") if obj.get("cpu_architecture") is not None else 'x86_64',
            "cpu_architectures": obj.get("cpu_architectures"),
            "url": obj.get("url"),
            "version": obj.get("version"),
            "default": obj.get("default"),
            "support_level": obj.get("support_level")
        })
        return _obj


