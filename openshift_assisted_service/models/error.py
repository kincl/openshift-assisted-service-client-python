# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, conint, validator

class Error(BaseModel):
    """
    Error
    """
    kind: StrictStr = Field(..., description="Indicates the type of this object. Will always be 'Error'.")
    id: conint(strict=True, le=504, ge=400) = Field(..., description="Numeric identifier of the error.")
    href: StrictStr = Field(..., description="Self link.")
    code: StrictStr = Field(..., description="Globally unique code of the error, composed of the unique identifier of the API and the numeric identifier of the error. For example, if the numeric identifier of the error is 93 and the identifier of the API is assisted_install then the code will be ASSISTED-INSTALL-93.")
    reason: StrictStr = Field(..., description="Human-readable description of the error.")
    __properties = ["kind", "id", "href", "code", "reason"]

    @validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Error'):
            raise ValueError("must be one of enum values ('Error')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Error:
        """Create an instance of Error from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Error:
        """Create an instance of Error from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Error.parse_obj(obj)

        _obj = Error.parse_obj({
            "kind": obj.get("kind"),
            "id": obj.get("id"),
            "href": obj.get("href"),
            "code": obj.get("code"),
            "reason": obj.get("reason")
        })
        return _obj


