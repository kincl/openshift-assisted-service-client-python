# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator

class OsImage(BaseModel):
    """
    OsImage
    """
    openshift_version: StrictStr = Field(..., description="Version of the operating system image")
    cpu_architecture: StrictStr = Field(..., description="The CPU architecture of the image (x86_64/arm64/etc).")
    url: StrictStr = Field(..., description="The base OS image used for the discovery iso.")
    version: StrictStr = Field(..., description="Build ID of the OS image.")
    __properties = ["openshift_version", "cpu_architecture", "url", "version"]

    @validator('cpu_architecture')
    def cpu_architecture_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('x86_64', 'aarch64', 'arm64', 'ppc64le', 's390x'):
            raise ValueError("must be one of enum values ('x86_64', 'aarch64', 'arm64', 'ppc64le', 's390x')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OsImage:
        """Create an instance of OsImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OsImage:
        """Create an instance of OsImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OsImage.parse_obj(obj)

        _obj = OsImage.parse_obj({
            "openshift_version": obj.get("openshift_version"),
            "cpu_architecture": obj.get("cpu_architecture") if obj.get("cpu_architecture") is not None else 'x86_64',
            "url": obj.get("url"),
            "version": obj.get("version")
        })
        return _obj


