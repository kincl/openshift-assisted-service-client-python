# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr

class L2Connectivity(BaseModel):
    """
    L2Connectivity
    """
    outgoing_nic: Optional[StrictStr] = None
    outgoing_ip_address: Optional[StrictStr] = None
    remote_ip_address: Optional[StrictStr] = None
    remote_mac: Optional[StrictStr] = None
    successful: Optional[StrictBool] = None
    __properties = ["outgoing_nic", "outgoing_ip_address", "remote_ip_address", "remote_mac", "successful"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> L2Connectivity:
        """Create an instance of L2Connectivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> L2Connectivity:
        """Create an instance of L2Connectivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return L2Connectivity.parse_obj(obj)

        _obj = L2Connectivity.parse_obj({
            "outgoing_nic": obj.get("outgoing_nic"),
            "outgoing_ip_address": obj.get("outgoing_ip_address"),
            "remote_ip_address": obj.get("remote_ip_address"),
            "remote_mac": obj.get("remote_mac"),
            "successful": obj.get("successful")
        })
        return _obj


