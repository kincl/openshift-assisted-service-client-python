# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator
from openshift_assisted_service.models.support_level import SupportLevel

class FeatureSupportLevelFeaturesInner(BaseModel):
    """
    FeatureSupportLevelFeaturesInner
    """
    feature_id: StrictStr = Field(..., description="(DEPRECATED) The ID of the feature")
    support_level: SupportLevel = Field(...)
    __properties = ["feature_id", "support_level"]

    @validator('feature_id')
    def feature_id_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ADDITIONAL_NTP_SOURCE', 'REQUESTED_HOSTNAME', 'PROXY', 'SNO', 'DAY2_HOSTS', 'VIP_AUTO_ALLOC', 'DISK_SELECTION', 'OVN_NETWORK_TYPE', 'SDN_NETWORK_TYPE', 'PLATFORM_SELECTION', 'SCHEDULABLE_MASTERS', 'AUTO_ASSIGN_ROLE', 'CUSTOM_MANIFEST', 'DISK_ENCRYPTION', 'CLUSTER_MANAGED_NETWORKING_WITH_VMS', 'ARM64_ARCHITECTURE', 'ARM64_ARCHITECTURE_WITH_CLUSTER_MANAGED_NETWORKING', 'PPC64LE_ARCHITECTURE', 'S390X_ARCHITECTURE', 'SINGLE_NODE_EXPANSION', 'LVM', 'DUAL_STACK_NETWORKING', 'MULTIARCH_RELEASE_IMAGE', 'NUTANIX_INTEGRATION', 'DUAL_STACK_VIPS', 'USER_MANAGED_NETWORKING_WITH_MULTI_NODE'):
            raise ValueError("must be one of enum values ('ADDITIONAL_NTP_SOURCE', 'REQUESTED_HOSTNAME', 'PROXY', 'SNO', 'DAY2_HOSTS', 'VIP_AUTO_ALLOC', 'DISK_SELECTION', 'OVN_NETWORK_TYPE', 'SDN_NETWORK_TYPE', 'PLATFORM_SELECTION', 'SCHEDULABLE_MASTERS', 'AUTO_ASSIGN_ROLE', 'CUSTOM_MANIFEST', 'DISK_ENCRYPTION', 'CLUSTER_MANAGED_NETWORKING_WITH_VMS', 'ARM64_ARCHITECTURE', 'ARM64_ARCHITECTURE_WITH_CLUSTER_MANAGED_NETWORKING', 'PPC64LE_ARCHITECTURE', 'S390X_ARCHITECTURE', 'SINGLE_NODE_EXPANSION', 'LVM', 'DUAL_STACK_NETWORKING', 'MULTIARCH_RELEASE_IMAGE', 'NUTANIX_INTEGRATION', 'DUAL_STACK_VIPS', 'USER_MANAGED_NETWORKING_WITH_MULTI_NODE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FeatureSupportLevelFeaturesInner:
        """Create an instance of FeatureSupportLevelFeaturesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FeatureSupportLevelFeaturesInner:
        """Create an instance of FeatureSupportLevelFeaturesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FeatureSupportLevelFeaturesInner.parse_obj(obj)

        _obj = FeatureSupportLevelFeaturesInner.parse_obj({
            "feature_id": obj.get("feature_id"),
            "support_level": obj.get("support_level")
        })
        return _obj


