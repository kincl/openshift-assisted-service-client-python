# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from openshift_assisted_service.models.disk_installation_eligibility import DiskInstallationEligibility
from openshift_assisted_service.models.drive_type import DriveType
from openshift_assisted_service.models.io_perf import IoPerf

class Disk(BaseModel):
    """
    Disk
    """
    id: Optional[StrictStr] = Field(None, description="Determine the disk's unique identifier which is the by-id field if it exists and fallback to the by-path field otherwise")
    drive_type: Optional[DriveType] = None
    has_uuid: Optional[StrictBool] = None
    vendor: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    path: Optional[StrictStr] = None
    hctl: Optional[StrictStr] = None
    by_path: Optional[StrictStr] = Field(None, description="by-path is the shortest physical path to the device")
    by_id: Optional[StrictStr] = Field(None, description="by-id is the World Wide Number of the device which guaranteed to be unique for every storage device")
    model: Optional[StrictStr] = None
    wwn: Optional[StrictStr] = None
    serial: Optional[StrictStr] = None
    size_bytes: Optional[StrictInt] = None
    bootable: Optional[StrictBool] = None
    removable: Optional[StrictBool] = None
    is_installation_media: Optional[StrictBool] = Field(None, description="Whether the disk appears to be an installation media or not")
    installation_eligibility: Optional[DiskInstallationEligibility] = None
    smart: Optional[StrictStr] = None
    io_perf: Optional[IoPerf] = None
    holders: Optional[StrictStr] = Field(None, description="A comma-separated list of disk names that this disk belongs to")
    __properties = ["id", "drive_type", "has_uuid", "vendor", "name", "path", "hctl", "by_path", "by_id", "model", "wwn", "serial", "size_bytes", "bootable", "removable", "is_installation_media", "installation_eligibility", "smart", "io_perf", "holders"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Disk:
        """Create an instance of Disk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of installation_eligibility
        if self.installation_eligibility:
            _dict['installation_eligibility'] = self.installation_eligibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of io_perf
        if self.io_perf:
            _dict['io_perf'] = self.io_perf.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Disk:
        """Create an instance of Disk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Disk.parse_obj(obj)

        _obj = Disk.parse_obj({
            "id": obj.get("id"),
            "drive_type": obj.get("drive_type"),
            "has_uuid": obj.get("has_uuid"),
            "vendor": obj.get("vendor"),
            "name": obj.get("name"),
            "path": obj.get("path"),
            "hctl": obj.get("hctl"),
            "by_path": obj.get("by_path"),
            "by_id": obj.get("by_id"),
            "model": obj.get("model"),
            "wwn": obj.get("wwn"),
            "serial": obj.get("serial"),
            "size_bytes": obj.get("size_bytes"),
            "bootable": obj.get("bootable"),
            "removable": obj.get("removable"),
            "is_installation_media": obj.get("is_installation_media"),
            "installation_eligibility": DiskInstallationEligibility.from_dict(obj.get("installation_eligibility")) if obj.get("installation_eligibility") is not None else None,
            "smart": obj.get("smart"),
            "io_perf": IoPerf.from_dict(obj.get("io_perf")) if obj.get("io_perf") is not None else None,
            "holders": obj.get("holders")
        })
        return _obj


