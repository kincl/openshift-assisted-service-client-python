# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator

class LogsGatherCmdRequest(BaseModel):
    """
    LogsGatherCmdRequest
    """
    cluster_id: StrictStr = Field(..., description="Cluster id")
    infra_env_id: StrictStr = Field(..., description="Infra env id")
    host_id: StrictStr = Field(..., description="Host id")
    bootstrap: StrictBool = Field(..., description="Host is bootstrap or not")
    installer_gather: StrictBool = Field(..., description="Run installer gather logs")
    master_ips: Optional[conlist(constr(strict=True))] = Field(None, description="List of master ips")
    __properties = ["cluster_id", "infra_env_id", "host_id", "bootstrap", "installer_gather", "master_ips"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LogsGatherCmdRequest:
        """Create an instance of LogsGatherCmdRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LogsGatherCmdRequest:
        """Create an instance of LogsGatherCmdRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LogsGatherCmdRequest.parse_obj(obj)

        _obj = LogsGatherCmdRequest.parse_obj({
            "cluster_id": obj.get("cluster_id"),
            "infra_env_id": obj.get("infra_env_id"),
            "host_id": obj.get("host_id"),
            "bootstrap": obj.get("bootstrap"),
            "installer_gather": obj.get("installer_gather") if obj.get("installer_gather") is not None else True,
            "master_ips": obj.get("master_ips")
        })
        return _obj


