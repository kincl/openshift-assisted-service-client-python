# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import openshift_assisted_service
from openshift_assisted_service.models.inventory import Inventory  # noqa: E501
from openshift_assisted_service.rest import ApiException

class TestInventory(unittest.TestCase):
    """Inventory unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Inventory
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Inventory`
        """
        model = openshift_assisted_service.models.inventory.Inventory()  # noqa: E501
        if include_optional :
            return Inventory(
                hostname = '', 
                bmc_address = '', 
                interfaces = [
                    openshift_assisted_service.models.interface.interface(
                        ipv6_addresses = [
                            ''
                            ], 
                        vendor = '', 
                        name = '', 
                        has_carrier = True, 
                        product = '', 
                        mtu = 56, 
                        ipv4_addresses = [
                            ''
                            ], 
                        biosdevname = '', 
                        client_id = '', 
                        mac_address = '', 
                        flags = [
                            ''
                            ], 
                        speed_mbps = 56, 
                        type = '', )
                    ], 
                disks = [
                    openshift_assisted_service.models.disk.disk(
                        id = '', 
                        drive_type = 'Unknown', 
                        has_uuid = True, 
                        vendor = '', 
                        name = '', 
                        path = '', 
                        hctl = '', 
                        by_path = '', 
                        by_id = '', 
                        model = '', 
                        wwn = '', 
                        serial = '', 
                        size_bytes = 56, 
                        bootable = True, 
                        removable = True, 
                        is_installation_media = True, 
                        installation_eligibility = openshift_assisted_service.models.disk_installation_eligibility.disk_installation_eligibility(
                            eligible = True, 
                            not_eligible_reasons = [
                                ''
                                ], ), 
                        smart = '', 
                        io_perf = openshift_assisted_service.models.io_perf.io_perf(
                            sync_duration = 56, ), 
                        holders = '', )
                    ], 
                boot = openshift_assisted_service.models.boot.boot(
                    current_boot_mode = '', 
                    pxe_interface = '', ), 
                system_vendor = openshift_assisted_service.models.system_vendor.system_vendor(
                    serial_number = '', 
                    product_name = '', 
                    manufacturer = '', 
                    virtual = True, ), 
                bmc_v6address = '', 
                memory = openshift_assisted_service.models.memory.memory(
                    physical_bytes = 56, 
                    usable_bytes = 56, 
                    physical_bytes_method = 'dmidecode', ), 
                cpu = openshift_assisted_service.models.cpu.cpu(
                    count = 56, 
                    frequency = 1.337, 
                    flags = [
                        ''
                        ], 
                    model_name = '', 
                    architecture = '', ), 
                gpus = [
                    openshift_assisted_service.models.gpu.gpu(
                        vendor = '', 
                        vendor_id = '', 
                        device_id = '', 
                        name = '', 
                        address = '', )
                    ], 
                routes = [
                    openshift_assisted_service.models.route.route(
                        interface = '', 
                        gateway = '', 
                        destination = '', 
                        family = 56, 
                        metric = 56, )
                    ], 
                tpm_version = 'none'
            )
        else :
            return Inventory(
        )
        """

    def testInventory(self):
        """Test Inventory"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
