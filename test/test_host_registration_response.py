# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import openshift_assisted_service
from openshift_assisted_service.models.host_registration_response import HostRegistrationResponse  # noqa: E501
from openshift_assisted_service.rest import ApiException

class TestHostRegistrationResponse(unittest.TestCase):
    """HostRegistrationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test HostRegistrationResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HostRegistrationResponse`
        """
        model = openshift_assisted_service.models.host_registration_response.HostRegistrationResponse()  # noqa: E501
        if include_optional :
            return HostRegistrationResponse(
                kind = 'Host', 
                id = '', 
                href = '', 
                cluster_id = '', 
                infra_env_id = '', 
                status = 'discovering', 
                status_info = '', 
                validations_info = '', 
                logs_info = 'requested', 
                status_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                progress = openshift_assisted_service.models.host_progress_info.host-progress-info(
                    installation_percentage = 56, 
                    current_stage = 'Starting installation', 
                    progress_info = '', 
                    stage_started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    stage_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                stage_started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                stage_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                progress_stages = [
                    'Starting installation'
                    ], 
                connectivity = '', 
                api_vip_connectivity = '', 
                tang_connectivity = '', 
                inventory = '', 
                free_addresses = '', 
                ntp_sources = '', 
                disks_info = '', 
                role = 'auto-assign', 
                suggested_role = 'auto-assign', 
                bootstrap = True, 
                logs_collected_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                logs_started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                installer_version = '', 
                installation_disk_path = '/dev/sda', 
                installation_disk_id = '', 
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                checked_in_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                registered_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                discovery_agent_version = '', 
                requested_hostname = '', 
                user_name = '', 
                media_status = 'connected', 
                deleted_at = openshift_assisted_service.models.deleted_at.deleted_at(), 
                ignition_config_overrides = '{"ignition": {"version": "3.1.0"}, "storage": {"files": [{"path": "/tmp/example", "contents": {"source": "data:text/plain;base64,aGVscGltdHJhcHBlZGluYXN3YWdnZXJzcGVj"}}]}}', 
                installer_args = '', 
                timestamp = 56, 
                machine_config_pool_name = '', 
                images_status = '', 
                domain_name_resolutions = '', 
                ignition_endpoint_token_set = True, 
                node_labels = '', 
                disks_to_be_formatted = '', 
                skip_formatting_disks = '', 
                next_step_runner_command = openshift_assisted_service.models.host_registration_response_all_of_next_step_runner_command.host_registration_response_allOf_next_step_runner_command(
                    command = '', 
                    args = [
                        ''
                        ], 
                    retry_seconds = 56, )
            )
        else :
            return HostRegistrationResponse(
                kind = 'Host',
                id = '',
                href = '',
                status = 'discovering',
                status_info = '',
        )
        """

    def testHostRegistrationResponse(self):
        """Test HostRegistrationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
